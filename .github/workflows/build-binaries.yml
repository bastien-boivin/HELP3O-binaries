name: Build HELP3O Binaries

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }} Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, windows-latest]
        python: ['3.11', '3.12', '3.13']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      
      # Linux: installer gfortran
      - name: Install gfortran (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gfortran
      
      # macOS: installer gfortran via brew
      - name: Install gfortran (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc
          GCC_PREFIX="$(brew --prefix gcc)"
          GFORTRAN_BIN="$(ls "$GCC_PREFIX/bin" | grep -E '^gfortran-[0-9]+$' | head -n 1)"
          if [ -z "$GFORTRAN_BIN" ]; then
            echo "No gfortran executable found in $GCC_PREFIX/bin" >&2
            exit 1
          fi
          echo "$GCC_PREFIX/bin" >> "$GITHUB_PATH"
          echo "FC=$GCC_PREFIX/bin/$GFORTRAN_BIN" >> "$GITHUB_ENV"
          echo "F77=$GCC_PREFIX/bin/$GFORTRAN_BIN" >> "$GITHUB_ENV"
          echo "Using gfortran binary: $GCC_PREFIX/bin/$GFORTRAN_BIN"
      
      # Windows: installer MinGW
      - name: Install MinGW (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install mingw -y
          Add-Content $env:GITHUB_PATH 'C:\tools\mingw64\bin'
      
      # Installer numpy
      - name: Install numpy
        run: |
          python -m pip install --upgrade pip
          pip install numpy

      # Outils nécessaires pour le backend Meson utilisé par f2py (Python >= 3.12)
      - name: Install Meson toolchain
        run: |
          pip install meson ninja
      
      # Compiler HELP3O
      - name: Build HELP3O extension
        run: |
          python build_extensions.py
      
      # Renommer le binaire avec un nom standard
      - name: Rename binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          python << 'EOF'
          import sys
          import glob
          from pathlib import Path
          
          binaries = glob.glob("HELP3O.*.so")
          if binaries:
              src = Path(binaries[0])
              print(f"Found: {src}")
          else:
              print("ERROR: No binary found")
              sys.exit(1)
          EOF
      
      - name: Rename binary (Windows)
        if: runner.os == 'Windows'
        run: |
          python -c "import glob; print(glob.glob('HELP3O.*.pyd'))"
      
      # Upload comme artifact
      - name: Upload binary artifact (Linux/macOS)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-py${{ matrix.python }}
          path: HELP3O.*.so
          if-no-files-found: error
      
      - name: Upload binary artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-py${{ matrix.python }}
          path: HELP3O.*.pyd
          if-no-files-found: error

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Prepare release metadata
        id: meta
        shell: bash
        run: |
          TAG="v$(date -u +'%Y.%m')"
          if git rev-parse "refs/tags/${TAG}" >/dev/null 2>&1; then
            TAG="${TAG}-${GITHUB_RUN_NUMBER}"
          fi
          echo "tag=${TAG}" >> "${GITHUB_OUTPUT}"
          echo "name=HELP3O binaries ${TAG#v}" >> "${GITHUB_OUTPUT}"
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries
      
      - name: List packaged binaries
        run: |
          find binaries -type f
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.name }}
          files: binaries/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
